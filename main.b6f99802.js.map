{"version":3,"sources":["scripts/main.js"],"names":["start","document","querySelector","scoreDisplay","fieldRowAll","querySelectorAll","messageLose","messageStart","messageWin","defaultBoard","board","probabilityCount","score","started","createNewCell","freeCell","getRandomEmptyCell","row","cell","value","Math","random","checkIfPlayerLose","classList","remove","emptyCells","forEach","rowIndex","cellIndex","push","randomIndex","getRandomInt","length","max","floor","shiftRowLeft","newRow","filter","element","checkAndAction","check","showDisplay","checkIfPlayerWon","moveRight","i","reverse","_","j","moveLeft","moveUp","newColumn","map","el","index","k","moveDown","changeClassCell","addClass","add","some","handleVictory","textContent","goToOldBoard","oldBoard","oldProbabilityCount","oldScore","lose","temp","tepmProbabilityCount","tempScore","cells","boardCell","startGame","addEventListener","target","matches","key"],"mappings":"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","file":"main.b6f99802.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst start = document.querySelector('.start');\nconst scoreDisplay = document.querySelector('.game-score');\nconst fieldRowAll = document.querySelectorAll('.field-row');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\n\nconst defaultBoard = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet board = [];\nlet probabilityCount = 0;\nlet score = 0;\nlet started = false;\n\nfunction createNewCell() {\n  if (!freeCell()) {\n    if (checkIfPlayerLose()) {\n      messageLose.classList.remove('hidden');\n    }\n\n    return;\n  }\n\n  const [row, cell] = getRandomEmptyCell();\n  const value = Math.random() < 0.9 ? 2 : 4;\n\n  board[row][cell] = value;\n}\n\nfunction getRandomEmptyCell() {\n  const emptyCells = [];\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, cellIndex]);\n      }\n    });\n  });\n\n  const randomIndex = getRandomInt(emptyCells.length);\n\n  return emptyCells[randomIndex];\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction shiftRowLeft(row) {\n  const newRow = row.filter(element => element !== 0);\n\n  while (newRow.length < row.length) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction checkAndAction(check) {\n  if (!check) {\n    createNewCell();\n    showDisplay();\n    checkIfPlayerWon();\n  }\n}\n\nfunction moveRight(check) {\n  board.forEach((row, i) => {\n    board[i] = shiftRowLeft(row).reverse();\n  });\n\n  board.forEach((row, i) => {\n    row.forEach((_, j) => {\n      if (row[j - 1] === row[j]) {\n        row[j - 1] = 0;\n        row[j] *= 2;\n        score += row[j];\n      }\n    });\n  });\n\n  board.forEach((row, i) => {\n    board[i] = shiftRowLeft(row).reverse();\n  });\n\n  checkAndAction(check);\n}\n\nfunction moveLeft(check) {\n  board.forEach((row, i) => {\n    board[i] = shiftRowLeft(row);\n  });\n\n  board.forEach((row, i) => {\n    row.forEach((_, j) => {\n      if (row[j - 1] === row[j]) {\n        row[j - 1] *= 2;\n        row[j] = 0;\n        score += row[j - 1];\n      }\n    });\n  });\n\n  board.forEach((row, i) => {\n    board[i] = shiftRowLeft(row);\n  });\n\n  checkAndAction(check);\n}\n\nconst moveUp = (check) => {\n  board.forEach((row, i) => {\n    let newColumn = row.map((_, j) => board[j][i]);\n\n    newColumn = shiftRowLeft(newColumn);\n\n    newColumn.forEach((el, index) => {\n      if (newColumn[index - 1] === el) {\n        newColumn[index - 1] *= 2;\n        newColumn[index] = 0;\n        score += newColumn[index - 1];\n      }\n    });\n\n    newColumn = shiftRowLeft(newColumn);\n\n    newColumn.forEach((value, k) => {\n      board[k][i] = value;\n    });\n  });\n\n  checkAndAction(check);\n};\n\nconst moveDown = (check) => {\n  board.forEach((row, i) => {\n    let newColumn = row.map((_, j) => board[j][i]);\n\n    newColumn = shiftRowLeft(newColumn).reverse();\n\n    for (let j = 0; j < newColumn.length; j++) {\n      if (newColumn[j - 1] === newColumn[j]) {\n        newColumn[j - 1] = 0;\n        newColumn[j] *= 2;\n        score += newColumn[j];\n      }\n    }\n\n    newColumn = shiftRowLeft(newColumn).reverse();\n\n    newColumn.forEach((value, j) => {\n      board[j][i] = value;\n    });\n  });\n\n  checkAndAction(check);\n};\n\nfunction changeClassCell(element, addClass) {\n  element.classList = '';\n  element.classList.add('field-cell');\n\n  if (addClass) {\n    element.classList.add(addClass);\n  }\n}\n\nfunction checkIfPlayerWon() {\n  const pointForVictory = 2048;\n\n  return board.some(row => row.some(cell => cell === pointForVictory));\n}\n\nfunction handleVictory() {\n  messageWin.classList.remove('hidden');\n\n  start.textContent = 'Start';\n\n  start.classList\n    .remove('restart')\n    .add('start');\n\n  started = false;\n  messageStart.classList.remove('hidden');\n}\n\nif (checkAndAction) {\n  if (checkIfPlayerWon()) {\n    handleVictory();\n  }\n}\n\nfunction freeCell() {\n  return board.some(row => row.some(cell => cell === 0));\n}\n\nfunction goToOldBoard(oldBoard, oldProbabilityCount, oldScore) {\n  board = oldBoard.map(row => [...row]);\n  probabilityCount = oldProbabilityCount;\n  score = oldScore;\n}\n\nfunction checkIfPlayerLose() {\n  let lose = true;\n  const temp = board.map(row => [...row]);\n  const tepmProbabilityCount = probabilityCount;\n  const tempScore = score;\n\n  moveLeft('check');\n\n  if (freeCell()) {\n    lose = false;\n    goToOldBoard(temp, tepmProbabilityCount, tempScore);\n\n    return lose;\n  }\n\n  moveUp('check');\n\n  if (freeCell()) {\n    lose = false;\n    goToOldBoard(temp, tepmProbabilityCount, tempScore);\n\n    return lose;\n  }\n\n  goToOldBoard(temp, tepmProbabilityCount, tempScore);\n\n  return lose;\n}\n\nfunction showDisplay() {\n  board.forEach((row, i) => {\n    const cells = fieldRowAll[i].querySelectorAll('.field-cell');\n\n    row.forEach((boardCell, j) => {\n      const cell = cells[j];\n\n      if (boardCell !== 0) {\n        cell.textContent = boardCell;\n\n        const addClass = `field-cell--${boardCell}`;\n\n        changeClassCell(cell, addClass);\n      } else {\n        cell.textContent = '';\n        changeClassCell(cell);\n      }\n    });\n  });\n\n  scoreDisplay.textContent = score;\n}\n\nfunction startGame() {\n  board = defaultBoard.map(row => [...row]);\n  probabilityCount = 0;\n  score = 0;\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  createNewCell();\n  createNewCell();\n  showDisplay();\n}\n\nstart.addEventListener('click', ({ target }) => {\n  startGame();\n  started = true;\n\n  if (target.matches('.start')) {\n    start.textContent = 'Restart';\n    start.classList.remove('start');\n    start.classList.add('restart');\n  }\n});\n\ndocument.addEventListener('keyup', ({ key }) => {\n  if (!started) {\n    return;\n  }\n\n  switch (key) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    default:\n      break;\n  }\n});\n"]}